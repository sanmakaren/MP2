broom::augment(newdata = pretend_training)
predicted_points_2 <- model_2 %>%
broom::augment(newdata = pretend_test)
pretend_test <- pretend_test %>%
mutate(
log10_SalePrice_hat = predicted_points_2$.fitted,
SalePrice_hat = 10^log10_SalePrice_hat
)
rmsle_hat = MLmetrics::RMSLE(y_pred = pretend_test$SalePrice_hat, y_true = pretend_test$SalePrice)
df2[nrow(df2) + 1,] = list(j,rmsle_hat)
}
mean(df2$RMSLE)
```{r}
mean(df$RMSLE)
mean(df$RMSLE)
mean(df$RMSLE)
training <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
df = data.frame(fold = numeric(0), RMSLE = numeric(0))
for(j in 1:5){
pretend_training <- training %>%
filter(fold != j)
pretend_test <- training %>%
filter(fold == j)
# Fit model on pretend training
model_1_formula <- as.formula("SalePrice~ GrLivArea + BldgType")
model_1 <- lm(model_1_formula, data = pretend_training)
fitted_points_1 <- model_1 %>%
broom::augment(newdata = pretend_training)
predicted_points_1 <- model_1 %>%
broom::augment(newdata = pretend_test)
rmsle_hat = MLmetrics::RMSLE(y_pred = predicted_points_1$.fitted, y_true = predicted_points_1$SalePrice)
df[nrow(df) + 1,] = list(j,rmsle_hat)
}
mean(df$RMSLE)
training <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
df = data.frame(fold = numeric(0), RMSLE = numeric(0))
model_1_formula <- as.formula("SalePrice~ GrLivArea + BldgType")
for(j in 1:5){
pretend_training <- training %>%
filter(fold != j)
pretend_test <- training %>%
filter(fold == j)
# Fit model on pretend training
model_1 <- lm(model_1_formula, data = pretend_training)
fitted_points_1 <- model_1 %>%
broom::augment(newdata = pretend_training)
predicted_points_1 <- model_1 %>%
broom::augment(newdata = pretend_test)
rmsle_hat = MLmetrics::RMSLE(y_pred = predicted_points_1$.fitted, y_true = predicted_points_1$SalePrice)
df[nrow(df) + 1,] = list(j,rmsle_hat)
}
predict_test <- model_1 %>%
broom::augment(newdata = test)
View(predict_test)
submission <- sample_submission %>%
mutate(SalePrice = mean(test$.fitted))
write_csv(submission, path = "data/submission_due_diligence.csv")
View(predict_test)
predict_test <- model_1 %>%
broom::augment(newdata = test)
test <- test %>%
mutate(
log10_SalePrice_hat = predict_test$.fitted,
SalePrice_hat = 10^log10_SalePrice_hat
)
submission <- sample_submission %>%
mutate(SalePrice = mean(test$.fitted))
write_csv(submission, path = "data/submission_due_diligence.csv")
submission <- sample_submission %>%
mutate(SalePrice = mean(test$SalePrice_hat))
write_csv(submission, path = "data/submission_due_diligence.csv")
submission <- test %>%
mutate(SalePrice = test$SalePrice_hat) %>%
select(Id,SalePrice)
write_csv(submission, path = "data/submission_due_diligence.csv")
predict_test <- model_1 %>%
broom::augment(newdata = test)
test <- test %>%
mutate(
log10_SalePrice_hat = predict_test$.fitted,
SalePrice_hat = 10^log10_SalePrice_hat
) %>%
select(Id,SalePrice)
predict_test <- model_1 %>%
broom::augment(newdata = test)
test <- test %>%
mutate(
log10_SalePrice_hat = predict_test$.fitted,
SalePrice_hat = 10^log10_SalePrice_hat
) %>%
select(Id,SalePrice_hat)
View(test)
View(pretend_test)
predict_test <- model_1 %>%
broom::augment(newdata = test)
test <- test %>%
mutate(
log10_SalePrice_hat = predict_test$.fitted,
) %>%
select(Id,log10_SalePrice_hat)
training <- read_csv("data/train.csv")
test <- read_csv("data/test.csv")
sample_submission <- read_csv("data/sample_submission.csv")
#variables:   Categorical - BldgType,  Numerical - GrLivArea
#log10_GrLivArea + BldgType + OverallQual + HalfBath + Foundation + SaleCondition")
training <- training %>%
select(Id, GrLivArea, BldgType, SalePrice, OverallQual, HalfBath, Foundation, SaleCondition)
training <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
df = data.frame(fold = numeric(0), RMSLE = numeric(0))
model_1_formula <- as.formula("SalePrice~ GrLivArea + BldgType")
for(j in 1:5){
pretend_training <- training %>%
filter(fold != j)
pretend_test <- training %>%
filter(fold == j)
# Fit model on pretend training
model_1 <- lm(model_1_formula, data = pretend_training)
fitted_points_1 <- model_1 %>%
broom::augment(newdata = pretend_training)
predicted_points_1 <- model_1 %>%
broom::augment(newdata = pretend_test)
rmsle_hat = MLmetrics::RMSLE(y_pred = predicted_points_1$.fitted, y_true = predicted_points_1$SalePrice)
df[nrow(df) + 1,] = list(j,rmsle_hat)
}
mean(df$RMSLE)
predict_test <- model_1 %>%
broom::augment(newdata = test)
test <- test %>%
mutate(SalePrice_hat = predict_test$.fitted)
submission <- test %>%
mutate(SalePrice = test$SalePrice_hat) %>%
select(Id,SalePrice)
write_csv(submission, path = "data/submission_due_diligence.csv")
submission <- test %>%
mutate(SalePrice = predict_test$.fitted) %>%
select(Id,SalePrice)
write_csv(submission, path = "data/submission_due_diligence.csv")
training <- training %>%
mutate(log10_SalePrice = log10(SalePrice),
log10_GrLivArea = log10(GrLivArea),
log10_OverallQual = log10(OverallQual)
)
training <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
df2 = data.frame(fold = numeric(0), RMSLE = numeric(0))
for(j in 1:5){
pretend_training <- training %>%
filter(fold != j)
pretend_test <- training %>%
filter(fold == j)
# Fit model on pretend training
model_2_formula <- as.formula("log10_SalePrice~ log10_GrLivArea + BldgType + OverallQual + HalfBath + Foundation + SaleCondition")
model_2 <- lm(model_2_formula, data = pretend_training)
fitted_points_2 <- model_2 %>%
broom::augment(newdata = pretend_training)
predicted_points_2 <- model_2 %>%
broom::augment(newdata = pretend_test)
pretend_test <- pretend_test %>%
mutate(
log10_SalePrice_hat = predicted_points_2$.fitted,
SalePrice_hat = 10^log10_SalePrice_hat
)
rmsle_hat = MLmetrics::RMSLE(y_pred = pretend_test$SalePrice_hat, y_true = pretend_test$SalePrice)
df2[nrow(df2) + 1,] = list(j,rmsle_hat)
}
mean(df2$RMSLE)
predict_test2 <- model_2 %>%
broom::augment(newdata = test)
submission <- test %>%
mutate(
log10_SalePrice = predict_test$.fitted,
SalePrice = 10^log10_SalePrice_hat
) %>%
select(Id,SalePrice)
write_csv(submission, path = "data/submission_reach_for_stars.csv")
predict_test2 <- model_2 %>%
broom::augment(newdata = test)
submission <- test %>%
mutate(
log10_SalePrice = predict_test2$.fitted,
SalePrice = 10^log10_SalePrice_hat
) %>%
select(Id,SalePrice)
write_csv(submission, path = "data/submission_reach_for_stars.csv")
predict_test2 <- model_2 %>%
broom::augment(newdata = test)
submission <- test %>%
mutate(
log10_SalePrice = predict_test2$.fitted,
SalePrice = 10^log10_SalePrice_hat
) %>%
select(Id,SalePrice)
write_csv(submission, path = "data/submission_reach_for_stars.csv")
predict_test2 <- model_2 %>%
broom::augment(newdata = test)
predict_test <- model_1 %>%
broom::augment(newdata = test)
submission <- test %>%
mutate(SalePrice = predict_test$.fitted) %>%
select(Id,SalePrice)
write_csv(submission, path = "data/submission_due_diligence.csv")
training <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
df2 = data.frame(fold = numeric(0), RMSLE = numeric(0))
for(j in 1:5){
pretend_training <- training %>%
filter(fold != j)
pretend_test <- training %>%
filter(fold == j)
# Fit model on pretend training
model_2_formula <- as.formula("log10_SalePrice~ log10_GrLivArea + BldgType + OverallQual + HalfBath + Foundation + SaleCondition")
model_2 <- lm(model_2_formula, data = pretend_training)
fitted_points_2 <- model_2 %>%
broom::augment(newdata = pretend_training)
predicted_points_2 <- model_2 %>%
broom::augment(newdata = pretend_test)
pretend_test <- pretend_test %>%
mutate(
log10_SalePrice_hat = predicted_points_2$.fitted,
SalePrice_hat = 10^log10_SalePrice_hat
)
rmsle_hat = MLmetrics::RMSLE(y_pred = pretend_test$SalePrice_hat, y_true = pretend_test$SalePrice)
df2[nrow(df2) + 1,] = list(j,rmsle_hat)
}
mean(df2$RMSLE)
model_2
model_1
predict_test2 <- model_2 %>%
broom::augment(newdata = test)
training <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
df = data.frame(fold = numeric(0), RMSLE = numeric(0))
model_1_formula <- as.formula("SalePrice~ GrLivArea + BldgType")
for(j in 1:5){
pretend_training <- training %>%
filter(fold != j)
pretend_test <- training %>%
filter(fold == j)
# Fit model on pretend training
model_1 <- lm(model_1_formula, data = pretend_training)
fitted_points_1 <- model_1 %>%
broom::augment(newdata = pretend_training)
predicted_points_1 <- model_1 %>%
broom::augment(newdata = pretend_test)
rmsle_hat = MLmetrics::RMSLE(y_pred = predicted_points_1$.fitted, y_true = predicted_points_1$SalePrice)
df[nrow(df) + 1,] = list(j,rmsle_hat)
}
mean(df$RMSLE)
predict_test <- model_1 %>%
broom::augment(newdata = test)
submission <- test %>%
mutate(SalePrice = predict_test$.fitted) %>%
select(Id,SalePrice)
write_csv(submission, path = "data/submission_due_diligence.csv")
training <- read_csv("data/train.csv")
test <- read_csv("data/test.csv")
sample_submission <- read_csv("data/sample_submission.csv")
training <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
df = data.frame(fold = numeric(0), RMSLE = numeric(0))
model_1_formula <- as.formula("SalePrice~ GrLivArea + BldgType")
for(j in 1:5){
pretend_training <- training %>%
filter(fold != j)
pretend_test <- training %>%
filter(fold == j)
# Fit model on pretend training
model_1 <- lm(model_1_formula, data = pretend_training)
fitted_points_1 <- model_1 %>%
broom::augment(newdata = pretend_training)
predicted_points_1 <- model_1 %>%
broom::augment(newdata = pretend_test)
rmsle_hat = MLmetrics::RMSLE(y_pred = predicted_points_1$.fitted, y_true = predicted_points_1$SalePrice)
df[nrow(df) + 1,] = list(j,rmsle_hat)
}
mean(df$RMSLE)
predict_test <- model_1 %>%
broom::augment(newdata = test)
submission <- test %>%
mutate(SalePrice = predict_test$.fitted) %>%
select(Id,SalePrice)
write_csv(submission, path = "data/submission_due_diligence.csv")
training <- training %>%
mutate(log10_SalePrice = log10(SalePrice),
log10_GrLivArea = log10(GrLivArea),
log10_OverallQual = log10(OverallQual)
)
training <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
df2 = data.frame(fold = numeric(0), RMSLE = numeric(0))
model_2_formula <- as.formula("log10_SalePrice~ log10_GrLivArea + BldgType + OverallQual + HalfBath + Foundation + SaleCondition")
for(j in 1:5){
pretend_training <- training %>%
filter(fold != j)
pretend_test <- training %>%
filter(fold == j)
# Fit model on pretend training
model_2 <- lm(model_2_formula, data = pretend_training)
fitted_points_2 <- model_2 %>%
broom::augment(newdata = pretend_training)
predicted_points_2 <- model_2 %>%
broom::augment(newdata = pretend_test)
pretend_test <- pretend_test %>%
mutate(
log10_SalePrice_hat = predicted_points_2$.fitted,
SalePrice_hat = 10^log10_SalePrice_hat
)
rmsle_hat = MLmetrics::RMSLE(y_pred = pretend_test$SalePrice_hat, y_true = pretend_test$SalePrice)
df2[nrow(df2) + 1,] = list(j,rmsle_hat)
}
training <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
df2 = data.frame(fold = numeric(0), RMSLE = numeric(0))
model_2_formula <- as.formula("log10_SalePrice~ log10_GrLivArea + BldgType + OverallQual + HalfBath + Foundation + SaleCondition")
for(j in 1:5){
pretend_training <- training %>%
filter(fold != j)
pretend_test <- training %>%
filter(fold == j)
# Fit model on pretend training
model_2 <- lm(model_2_formula, data = pretend_training)
fitted_points_2 <- model_2 %>%
broom::augment(newdata = pretend_training)
predicted_points_2 <- model_2 %>%
broom::augment(newdata = pretend_test)
pretend_test <- pretend_test %>%
mutate(
log10_SalePrice_hat = predicted_points_2$.fitted,
SalePrice_hat = 10^log10_SalePrice_hat
)
rmsle_hat = MLmetrics::RMSLE(y_pred = pretend_test$SalePrice_hat, y_true = pretend_test$SalePrice)
df2[nrow(df2) + 1,] = list(j,rmsle_hat)
}
mean(df2$RMSLE)
predict_test2 <- model_2 %>%
broom::augment(newdata = test)
View(fitted_points_2)
View(fitted_points_2)
broom::augment(model_1, newdata = test)
predict_test2 <- broom::augment(model_1, newdata = test)
View(predict_test2)
predict_test2 <- broom::augment(model_2, newdata = test)
training <- training %>%
mutate(log10_SalePrice = log10(SalePrice),
log10_GrLivArea = log10(GrLivArea),
log10_OverallQual = log10(OverallQual)
)
test <- test %>%
mutate(log10_SalePrice = log10(SalePrice),
log10_GrLivArea = log10(GrLivArea),
log10_OverallQual = log10(OverallQual)
)
training <- training %>%
mutate(log10_SalePrice = log10(SalePrice),
log10_GrLivArea = log10(GrLivArea),
log10_OverallQual = log10(OverallQual)
)
test <- test %>%
mutate(
log10_GrLivArea = log10(GrLivArea),
log10_OverallQual = log10(OverallQual)
)
training <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
df2 = data.frame(fold = numeric(0), RMSLE = numeric(0))
model_2_formula <- as.formula("log10_SalePrice~ log10_GrLivArea + BldgType + OverallQual + HalfBath + Foundation + SaleCondition")
for(j in 1:5){
pretend_training <- training %>%
filter(fold != j)
pretend_test <- training %>%
filter(fold == j)
# Fit model on pretend training
model_2 <- lm(model_2_formula, data = pretend_training)
fitted_points_2 <- model_2 %>%
broom::augment(newdata = pretend_training)
predicted_points_2 <- model_2 %>%
broom::augment(newdata = pretend_test)
pretend_test <- pretend_test %>%
mutate(
log10_SalePrice_hat = predicted_points_2$.fitted,
SalePrice_hat = 10^log10_SalePrice_hat
)
rmsle_hat = MLmetrics::RMSLE(y_pred = pretend_test$SalePrice_hat, y_true = pretend_test$SalePrice)
df2[nrow(df2) + 1,] = list(j,rmsle_hat)
}
mean(df2$RMSLE)
predict_test2 <- model_2 %>%
broom::augment(newdata = test)
submission <- test %>%
mutate(
log10_SalePrice = predict_test2$.fitted,
SalePrice = 10^log10_SalePrice_hat
) %>%
select(Id,SalePrice)
write_csv(submission, path = "data/submission_reach_for_stars.csv")
submission <- test %>%
mutate(
log10_SalePrice = predict_test2$.fitted,
SalePrice = 10^log10_SalePrice
) %>%
select(Id,SalePrice)
write_csv(submission, path = "data/submission_reach_for_stars.csv")
library(leaps)
install.packages(leaps)
install.packages("leaps")
library(leaps)
regfit.full = regsubsets(SalePrice~model_2_formula)
summary(regfit.full)
regfit.full <- regsubsets(SalePrice~model_2_formula, data = training)
summary(regfit.full)
regfit.full = regsubsets(SalePrice~model_2_formula, data = training)
summary(regfit.full)
regfit.full = regsubsets(SalePrice~model_2_formula, data = training)
regfit.full = regsubsets(SalePrice~., data = training)
regfit.full = regsubsets(SalePrice~model_1_formula, data = training)
?leaps
regsubsets(x = model_2_formula, data = training, nvmax = 6)
# Load all your packages here:
library(tidyverse)
library(scales)
library(MLmetrics)
library(broom)
library(caret)
# Set default behavior for all code chunks here:
knitr::opts_chunk$set(
echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 16/2, fig.height = 9/2
)
# Set seed value of random number generator here. This is in order to get
# "replicable" randomness, so that any results based on random sampling or
# resampling are replicable everytime you knit this file. Why use a seed value
# of 76? For no other reason than 76 is one of my favorite numbers:
# https://www.youtube.com/watch?v=xjJ7FheCkCU
set.seed(76)
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(SalePrice~.,data=training[folds!=j,], nvmax=19)
library(leaps)
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(SalePrice~.,data=training[folds!=j,], nvmax=19)
for(j in 1:5){
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(SalePrice~.,data=training[folds!=j,], nvmax=19)
for(j in 1:5){
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(SalePrice~.,data=training[folds!=j,], nvmax=19)
}
df2 = data.frame(fold = numeric(0), RMSLE = numeric(0))
for(j in 1:5){
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(SalePrice~.,data=training[fold!=j,], nvmax=19)
}
df2 = data.frame(fold = numeric(0), RMSLE = numeric(0))
for(j in 1:5){
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(SalePrice~.,data=training[folds!=j,], nvmax=19)
}
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(SalePrice~.,data=training[folds!=j,], nvmax=19)
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(SalePrice~.,data=training, nvmax=19)
training <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
model_2_formula <- as.formula("log10_SalePrice~ log10_GrLivArea + BldgType + OverallQual + HalfBath + Foundation + SaleCondition")
trainingt <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
model_2_formula <- as.formula("log10_SalePrice~ log10_GrLivArea + BldgType + OverallQual + HalfBath + Foundation + SaleCondition")
trainingt <- training %>%
sample_frac(1) %>%
mutate(fold = rep(1:5, length = n())) %>%
arrange(fold)
trainingt <- trainingt %>%
select(log10_GrLivArea,BldgType,OverallQual,HalfBath, Foundation, SaleCondition, log10_SalePrice)
model_2_formula <- as.formula("log10_SalePrice~ log10_GrLivArea + BldgType + OverallQual + HalfBath + Foundation + SaleCondition")
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(log10_SalePrice~.,data=training, nvmax=19)
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(log10_SalePrice~.,data=trainingt, nvmax=19)
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(log10_SalePrice~.,data=trainingt, nvmax=19)
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(log10_SalePrice~.,data=trainingt, nvmax=19)
summary(best.fit)
# Fit the model with each subset of predictors on the training part of the fold
regfit.full=regsubsets(log10_SalePrice~.,data=trainingt, nvmax=19)
summary(regfit.full)
